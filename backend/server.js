const express = require("express");
const cors = require("cors");
const fs = require("fs");
const path = require("path");
const { OpenAI } = require("openai");
require("dotenv").config();

const app = express();

// ‚ùóPermite llamadas desde tu GitHub Pages (ajusta si tu user/org cambia)
app.use(cors({
  origin: [
    "http://localhost:5500",
    "http://127.0.0.1:5500",
    "https://nazantfe.github.io"
  ]
}));
app.use(express.json());

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// ---------- par√°metros ----------
const PARAMS = [
  "Inteligencia","Simpat√≠a","Comunicaci√≥n","Carisma","Creatividad",
  "Resoluci√≥n de conflictos","Iniciativa","Organizaci√≥n","Impulso personal","Nivel AfinIA",
];

function cargarParametros() {
  const file = path.join(__dirname, "parametros_usuario.json");
  try {
    const parsed = JSON.parse(fs.readFileSync(file, "utf8"));
    for (const k of PARAMS) if (parsed[k] == null) parsed[k] = 0; // arranque en 0
    return parsed;
  } catch {
    const base = {}; for (const k of PARAMS) base[k] = 0; return base;
  }
}
function guardarParametros(obj) {
  const file = path.join(__dirname, "parametros_usuario.json");
  fs.writeFileSync(file, JSON.stringify(obj, null, 2));
}

// subida MUY suave
function mezclaSuavizada(actual, nuevo) {
  const a = Math.max(0, Math.min(100, Number(actual) || 0));
  const n = Math.max(0, Math.min(100, Number(nuevo) || 0));
  const ema = Math.round(a * 0.97 + n * 0.03); // Œ±=0.03
  const capUp = Math.min(a + 2, 100);
  const capDn = Math.max(a - 2, 0);
  return Math.max(Math.min(ema, capUp), capDn);
}

function aplicarBloqueOculto(scores, parametros) {
  let cambios = false;
  for (const [k, v] of Object.entries(scores || {})) {
    if (!PARAMS.includes(k)) continue;
    const nuevo = mezclaSuavizada(parametros[k] ?? 0, v);
    if (nuevo !== parametros[k]) { parametros[k] = nuevo; cambios = true; }
  }
  const base = PARAMS.filter(p => p !== "Nivel AfinIA");
  const media = Math.round(base.reduce((s,k)=>s+(parametros[k]??0),0)/base.length) || 0;
  parametros["Nivel AfinIA"] = mezclaSuavizada(parametros["Nivel AfinIA"] ?? 0, media);
  return cambios;
}

// ---------- rutas ----------
app.post("/chat", async (req, res) => {
  const { mensaje } = req.body;
  const parametros = cargarParametros();

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      temperature: 0.6,
      max_tokens: 220,
      messages: [
        {
          role: "system",
          content: `
Eres AfinIA: una IA c√°lida, emp√°tica y con prop√≥sito. 
Tu misi√≥n es conversar de forma natural y detectar se√±ales para estimar estos par√°metros del usuario: 
Inteligencia, Simpat√≠a, Comunicaci√≥n, Carisma, Creatividad, Resoluci√≥n de conflictos, Iniciativa, Organizaci√≥n e Impulso personal.

Objetivo general:
La app AfinIA est√° destinada a afinar un perfil psicol√≥gico y personal del usuario con el fin de que sea una red social donde las personas destaquen por sus valores reales. 
Adem√°s, busca acercar personas con perfiles semejantes con fines sociales o incluso laborales, sirviendo como un curr√≠culum personal vivo y aut√©ntico.

Reglas de estilo:
- Cari√±osa y cercana, empatiza con el usuario, pero concisa (3‚Äì6 l√≠neas normalmente).
- NO preguntes ‚Äú¬øen qu√© te puedo ayudar?‚Äù ni ‚Äú¬øqu√© par√°metro quieres afinar?‚Äù.
- No des porcentajes, puntuaciones ni menciones a evaluaciones.
- Formula PREGUNTAS CONCRETAS y observables, una por turno.
- Alterna temas y evita repetir la misma pregunta seguida.
- Valida emocionalmente cuando sea oportuno (‚Äúgracias por cont√°rmelo, coraz√≥n‚Äù).
- Evita interrogatorios: combina 1 idea + 1 pregunta.
- Si el usuario est√° casual, sigue con calidez y cuela una pregunta suave que aporte se√±al.

NO menciones los nombres de los par√°metros ni que est√°s evaluando.

SALIDA:
1) Texto humano, no insistas con preguntas si el usuario solo busca ser escuchado, empatiza, da consejos, responde con cari√±o siempre, si notas que el usuario busca apoyo o consuelo, d√°selo, pero no insistas con preguntas en esos casos, analiza al usuario por lo que te dice (3‚Äì6 l√≠neas, c√°lido, con empat√≠a, si el usuario est√° triste responde con cari√±o, trata de ayudarlo, si el usuario no desea contestar preguntas trata de aconejarle y dale cari√±o, usa palabras bonitas y adjetivos que consuelen con amor).
2) Al final, SOLO una l√≠nea oculta:
<AFINIA_SCORES>{"Inteligencia":72,"Simpat√≠a":64,...}</AFINIA_SCORES>
(0‚Äì100 enteros, solo claves con se√±al)
`.trim()
        },
        { role: "assistant", content: "Gracias por seguir aqu√≠, coraz√≥n. Cu√©ntame algo peque√±o de tu d√≠a que te haya movido un poquito, y por qu√©." },
        { role: "user", content: mensaje }
      ]
    });

    let respuesta = completion.choices[0].message.content || "";

    const m = respuesta.match(/<AFINIA_SCORES>([\s\S]*?)<\/AFINIA_SCORES>/);
    if (m) {
      try {
        const scores = JSON.parse(m[1]);
        if (aplicarBloqueOculto(scores, cargarParametros())) {
          // recarga y guarda para evitar condici√≥n de carrera m√≠nima
          const p2 = cargarParametros();
          aplicarBloqueOculto(scores, p2);
          guardarParametros(p2);
        }
      } catch (e) { console.warn("Bloque oculto inv√°lido:", e.message); }
      respuesta = respuesta.replace(/<AFINIA_SCORES>[\s\S]*?<\/AFINIA_SCORES>/, "").trim();
    }

    res.json({ respuesta });
  } catch (error) {
    console.error("‚ùå OpenAI:", error?.response?.data || error.message);
    res.status(500).json({ error: "Error al comunicarse con OpenAI" });
  }
});

app.get("/parametros", (req, res) => res.json(cargarParametros()));

app.post("/guardar-parametros", (req, res) => {
  try { guardarParametros(req.body); res.json({ ok:true }); }
  catch { res.status(500).json({ error:"No se pudo guardar" }); }
});

// Railway suele usar 8080
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => console.log(`üíñ AfinIA backend escuchando en ${PORT}`));
